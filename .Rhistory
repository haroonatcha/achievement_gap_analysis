ggplot(data = data) +
geom_line(aes(x = index,
y = value,
group = variable,
color = variable))
library('DiagrammeR')
grViz("
digraph dag{
}")
grViz("
digraph dag{
graph[rankdir = TD,
label = 'Theoretical DAG']
a[label = 'Cellular Access']
b[label = 'Tactical Capacity']
c[label = 'Propaganda Capacity']
d[label = 'Discipline Capacity']
a -> {b, c, d}
}")
grViz("
digraph dag{
graph[rankdir = TD,
label = 'Theoretical DAG',
labelloc = T]
a[label = 'Cellular Access']
b[label = 'Tactical Capacity']
c[label = 'Propaganda Capacity']
d[label = 'Discipline Capacity']
a -> {b, c, d}
}")
grViz("
digraph dag{
graph[rankdir = TD,
label = 'Theoretical DAG',
labelloc = t]
a[label = 'Cellular Access']
b[label = 'Tactical Capacity']
c[label = 'Propaganda Capacity']
d[label = 'Discipline Capacity']
a -> {b, c, d}
}")
grViz("
digraph dag{
graph[rankdir = TD,
label = 'Theoretical DAG',
labelloc = t]
a[label = 'Cellular Access']
b[label = 'Tactical Capacity']
c[label = 'Propaganda Capacity']
d[label = 'Discipline Capacity']
e[label = 'Tacit Support']
a -> {b, c, d}
c -> e
}")
expand.grid(0:23, 0:59)
time <- expand.grid(0:23, 0:59)
light_df <- function(hours = 8, max_k = 7500,
sunrise = 2, sunset = 2) {
temp <- expand.grid(0:23, 0:59)
colnames(temp) <- c('hour', 'minute')
return(temp)
}
light_df()
light_df <- function(hours = 8, max_k = 7500,
sunrise = 2, sunset = 2) {
temp <- expand.grid(0:23, 0:59)
colnames(temp) <- c('hour', 'minute')
temp[order(temp),]
return(temp)
}
light_df()
light_df <- function(hours = 8, max_k = 7500,
sunrise = 2, sunset = 2) {
temp <- expand.grid(0:23, 0:59)
colnames(temp) <- c('hour', 'minute')
temp <- temp[order(temp),]
return(temp)
}
light_df()
light_df <- function(hours = 8, max_k = 7500,
sunrise = 2, sunset = 2) {
temp <- expand.grid(0:23, 0:59)
colnames(temp) <- c('hour', 'minute')
temp <- temp[order(temp),]
return(temp)
}
light_df()
expand.grid(0:23, 0:59)
data.frame(expand.grid(0:23, 0:59))
temp <- data.frame(
expand.grid(0:23, 0:59)
)
temp
remove(time)
temp[sort(temp),]
temp[sort(temp$Var1),]
light_df <- function(hours = 8, max_k = 7500,
sunrise = 2, sunset = 2) {
temp <- expand.grid(0:23, 0:59)
colnames(temp) <- c('hour', 'minute')
temp <- temp[order(temp$hour),]
return(temp)
}
light_df()
k_to_rgb <- function(k) {
if(k < 1000) {
k <- 1000
}
k <- k/100
if(k <= 66) {
red <- 255
green <- 99.4708025861 * (ln(k) - 161.1195681661)
if(k <= 19) {
blue <- 0
} else {
blue <- 138.577312231 * ln(temp - 10) - 305.0447927307
}
} else {
red <- 329.698727446 * ((k - 60)^-01332047592)
green <- 288.1221695283 * ((k - 60) ^ -0.0755148492)
blue <- 255
}
return(red, green, blue)
}
k_to_rgb(7500)
k_to_rgb <- function(k) {
if(k < 1000) {
k <- 1000
}
k <- k/100
if(k <= 66) {
red <- 255
green <- 99.4708025861 * (ln(k) - 161.1195681661)
if(k <= 19) {
blue <- 0
} else {
blue <- 138.577312231 * ln(temp - 10) - 305.0447927307
}
} else {
red <- 329.698727446 * ((k - 60)^-01332047592)
green <- 288.1221695283 * ((k - 60) ^ -0.0755148492)
blue <- 255
}
return(c(red, green, blue))
}
k_to_rgb(7500)
round(k_to_rgb)
round(k_to_rgb(7500))
temp <- 1000:7500
vapply(temp, k_to_rgb)
vapply(temp, FUN = k_to_rgb)
apply(temp, FUN = k_to_rgb)
sapply(temp, FUN = k_to_rgb)
k_to_rgb <- function(k) {
if(k < 1000) {
k <- 1000
}
k <- k/100
if(k <= 66) {
red <- 255
green <- 99.4708025861 * (log(k) - 161.1195681661)
if(k <= 19) {
blue <- 0
} else {
blue <- 138.577312231 * log(temp - 10) - 305.0447927307
}
} else {
red <- 329.698727446 * ((k - 60)^-01332047592)
green <- 288.1221695283 * ((k - 60) ^ -0.0755148492)
blue <- 255
}
return(c(red, green, blue))
}
round(k_to_rgb(7500))
sapply(temp, FUN = k_to_rgb)
k_to_rgb <- function(k) {
if(k < 1000) {
k <- 1000
}
k <- k/100
if(k <= 66) {
red <- 255
green <- 99.4708025861 * (log(k) - 161.1195681661)
if(k <= 19) {
blue <- 0
} else {
blue <- 138.577312231 * log(temp - 10) - 305.0447927307
}
} else {
red <- 329.698727446 * ((k - 60)^-01332047592)
green <- 288.1221695283 * ((k - 60) ^ -0.0755148492)
blue <- 255
}
rgb <- c(red, green, blue)
rgb[which(rgb < 0)] <- 0
rgb[which(rgb > 255)] <- 255
}
round(k_to_rgb(7500))
k_to_rgb <- function(k) {
if(k < 1000) {
k <- 1000
}
k <- k/100
if(k <= 66) {
red <- 255
green <- 99.4708025861 * (log(k) - 161.1195681661)
if(k <= 19) {
blue <- 0
} else {
blue <- 138.577312231 * log(temp - 10) - 305.0447927307
}
} else {
red <- 329.698727446 * ((k - 60)^-01332047592)
green <- 288.1221695283 * ((k - 60) ^ -0.0755148492)
blue <- 255
}
rgb <- c(red, green, blue)
rgb[which(rgb < 0)] <- 0
rgb[which(rgb > 255)] <- 255
return(rgb)
}
round(k_to_rgb(7500))
329.698727446 * ((75 - 60)^-01332047592)
329.698727446 * ((75 - 60)^ -0.1332047592)
k_to_rgb <- function(k) {
if(k < 1000) {
k <- 1000
}
k <- k/100
if(k <= 66) {
red <- 255
green <- 99.4708025861 * (log(k) - 161.1195681661)
if(k <= 19) {
blue <- 0
} else {
blue <- 138.577312231 * log(temp - 10) - 305.0447927307
}
} else {
red <- 329.698727446 * ((k - 60)^-0.1332047592)
green <- 288.1221695283 * ((k - 60) ^ -0.0755148492)
blue <- 255
}
rgb <- c(red, green, blue)
rgb[which(rgb < 0)] <- 0
rgb[which(rgb > 255)] <- 255
return(rgb)
}
round(k_to_rgb(7500))
lapply(temp, FUN = k_to_rgb)
sapply(temp, FUN = k_to_rgb)
for(i in 1:length(temp)) {
print(round(k_to_rgb(temp[i])))
}
temp[1]
k_to_rgb(1000)
k_to_rgb(7500)
k_to_rgb <- function(k) {
if(k < 1000) {
k <- 1000
}
k <- k/100
if(k <= 66) {
red <- 255
green <- 99.4708025861 * (log(k) - 161.1195681661)
if(k <= 19) {
blue <- 0
} else {
blue <- 138.577312231 * log(temp - 10) - 305.0447927307
}
} else {
red <- 329.698727446 * ((k - 60)^-0.1332047592)
green <- 288.1221695283 * ((k - 60) ^ -0.0755148492)
blue <- 255
}
rgb <- c(red, green, blue)
rgb[which(rgb < 0)] <- 0
rgb[which(rgb > 255)] <- 255
rgb <- round(rgb)
return(rgb)
}
k_to_rgb(7500)
k_to_rgb(7500)
k_to_rgb(1000)
k_to_rgb <- function(k) {
if(k < 1000) {
k <- 1000
}
k <- k/100
if(k <= 66) {
red <- 255
green <- 99.4708025861 * log(k) - 161.1195681661
if(k <= 19) {
blue <- 0
} else {
blue <- 138.577312231 * log(temp - 10) - 305.0447927307
}
} else {
red <- 329.698727446 * ((k - 60)^-0.1332047592)
green <- 288.1221695283 * ((k - 60) ^ -0.0755148492)
blue <- 255
}
rgb <- c(red, green, blue)
rgb[which(rgb < 0)] <- 0
rgb[which(rgb > 255)] <- 255
rgb <- round(rgb)
return(rgb)
}
k_to_rgb(7500)
k_to_rgb(1000)
4e4
#This is a function to turn kelvin values into rgb.
k_to_rgb <- function(k) {
#if super orange, do the lowest orange it can be
if(k < 1000) {
k <- 1000
} else {
if(k > 4e4) {
k <- 4e4
}
}
#working with a scaled version fo kelvin
k <- k/100
#if under 6600k
if(k <= 66) {
red <- 255
green <- 99.4708025861 * log(k) - 161.1195681661
#blue has two conditions under 6600k
if(k <= 19) {
blue <- 0
} else {
blue <- 138.577312231 * log(temp - 10) - 305.0447927307
}
#if over 6600k
} else {
red <- 329.698727446 * ((k - 60)^-0.1332047592)
green <- 288.1221695283 * ((k - 60) ^ -0.0755148492)
blue <- 255
}
#create rgb
rgb <- c(red, green, blue)
#rgb values are 0-255. If lower, 0. If higher, 255
rgb[which(rgb < 0)] <- 0
rgb[which(rgb > 255)] <- 255
#rgb are integer values only
rgb <- round(rgb)
return(rgb)
}
k_to_rgb(40000)
min_k = 2500
max_k = 7500
create_df <- function() {
temp <- expand.grid(0:23, 0:59)
colnames(temp) <- c('hour', 'minute')
temp <- temp[sort(temp$hour),]
}
create_df()
create_df <- function() {
temp <- expand.grid(0:23, 0:59)
colnames(temp) <- c('hour', 'minute')
temp <- temp[sort(temp$hour),]
return(temp)
}
create_df()
create_df <- function() {
temp <- expand.grid(0:23, 0:59)
colnames(temp) <- c('hour', 'minute')
temp <- temp[order(temp$hour),]
return(temp)
}
create_df()
min_k = 2500
max_k = 7500
hours_on = 6
midday = 12
min_k = 2500
max_k = 7500
hours_on = 6
midday = 12
sunrise_duration = 1
sunset_duration = 1
c(letters, LETTERS)
min_k = 2500
max_k = 7500
hours_on = 6
midday = 12
sunrise_duration = 60
sunset_duration = 60
seq(from = min_k,
to = max_k,
length.out = sunrise_duration)
k_to_rgb(6500)
k_to_rgb <- function(k) {
#if super orange, do the lowest orange it can be
if(k < 1000) {
k <- 1000
} else {
if(k > 4e4) {
k <- 4e4
}
}
#working with a scaled version fo kelvin
k <- k/100
#if under 6600k
if(k <= 66) {
red <- 255
green <- 99.4708025861 * log(k) - 161.1195681661
#blue has two conditions under 6600k
if(k <= 19) {
blue <- 0
} else {
blue <- 138.577312231 * log(temp - 10) - 305.0447927307
}
#if over 6600k
} else {
red <- 329.698727446 * ((k - 60)^-0.1332047592)
green <- 288.1221695283 * ((k - 60) ^ -0.0755148492)
blue <- 255
}
#create rgb
rgb <- c(red, green, blue)
#rgb values are 0-255. If lower, 0. If higher, 255
rgb[which(rgb < 0)] <- 0
rgb[which(rgb > 255)] <- 255
#rgb are integer values only
rgb <- round(rgb)
return(rgb)
}
k_to_rgb(6500)
#This is the r version of a function to turn kelvin values into rgb values
#original: https://tannerhelland.com/2012/09/18/convert-temperature-rgb-algorithm-code.html
#some re-arranging was done to minimize code
k_to_rgb <- function(k) {
#if super orange, do the lowest orange it can be
if(k < 1000) {
k <- 1000
} else {
if(k > 4e4) {
k <- 4e4
}
}
#working with a scaled version fo kelvin
k <- k/100
#if under 6600k
if(k <= 66) {
red <- 255
green <- 99.4708025861 * log(k) - 161.1195681661
#blue has two conditions under 6600k
if(k <= 19) {
blue <- 0
} else {
blue <- 138.577312231 * log(temp - 10) - 305.0447927307
}
#if over 6600k
} else {
red <- 329.698727446 * ((k - 60)^-0.1332047592)
green <- 288.1221695283 * ((k - 60) ^ -0.0755148492)
blue <- 255
}
#create rgb
rgb <- c(red, green, blue)
#rgb values are 0-255. If lower, 0. If higher, 255
rgb[which(rgb < 0)] <- 0
rgb[which(rgb > 255)] <- 255
#rgb are integer values only
rgb <- round(rgb)
return(rgb)
}
k_to_rgb(6500)
k_to_rgb <- function(k) {
#if super orange, do the lowest orange it can be
if(k < 1000) {
k <- 1000
} else {
if(k > 4e4) {
k <- 4e4
}
}
#working with a scaled version fo kelvin
k <- k/100
#if under 6600k
if(k <= 66) {
red <- 255
green <- 99.4708025861 * log(k) - 161.1195681661
#blue has two conditions under 6600k
if(k <= 19) {
blue <- 0
} else {
blue <- 138.577312231 * log(k - 10) - 305.0447927307
}
#if over 6600k
} else {
red <- 329.698727446 * ((k - 60)^-0.1332047592)
green <- 288.1221695283 * ((k - 60) ^ -0.0755148492)
blue <- 255
}
#create rgb
rgb <- c(red, green, blue)
#rgb values are 0-255. If lower, 0. If higher, 255
rgb[which(rgb < 0)] <- 0
rgb[which(rgb > 255)] <- 255
#rgb are integer values only
rgb <- round(rgb)
return(rgb)
}
k_to_rgb(6500)
k_to_rgb(6000)
k_to_rgb(2500)
k_to_rgb(1500)
setwd('C:/Users/Haroon Atcha/Desktop/achievement_gap_analysis')
load.project()
library('ProjectTemplate')
load.project()
